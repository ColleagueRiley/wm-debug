#!/bin/bash

# This script is used to easily debug awesomewm changes.
# It is very simular to the awtt script. but it also works for other init levels apart from init 7

LOG_ERROR="\033[0;31m[ERROR]\033[0m "
LOG_WARN="\033[0;33m[WARN]\033[0m "
LOG_DEBUG="\033[0;35m[DEBUG]\033[0m "

AWESOME_DISPLAY=":1"
RESOLUTION="${RES:-800x600}"

EXEC="${EXEC:-awesome}"
ROOT_PATH="${ROOT_PATH:-/usr/bin}"

# by default we don't need to call a parent command
# eg gdb -> gdb "$EXEC" instead of "$EXEC"
PARENT_COMMAND=""

# disable root execution by default
UNSAFE=""
MULTIPLE_MONITORS=""

function log {
    echo -e "$@"
}

# Check that all inputs are valid.
# Currently checks to see if the command that should be executed exists
# Otherwise abort
function validate {
    # EXEC can be a command together with specific options
    # This line retreives the command (the first parameter)
    COMMAND="$(echo "$EXEC" | cut -d" " -f1 )"
    if [[ ! "$(command -v $COMMAND)" ]]; then
        log "$LOG_ERROR" "Command $COMMAND is not installed."
        exit 1
    fi
}

function is-installed {
    validate

    if [[ ! "$(command -v Xephyr)" ]]; then
            log "$LOG_ERROR" "Xephyr is not installed. Aborting..."
            exit 1
    fi
}

function check-non-root {
    if [[ "$(id -u)" == "0" && "$UNSAFE" = "" ]]; then
        log "$LOG_ERROR" "Don't run this script as root. We will ask for privileges when needed."
        log "$LOG_ERROR" "If you still want to run this program as root simply add the --unsafe option"
        exit 1
    fi
}

function help {
    name="wm-launch"
    echo -e "$name [-hrdeSRsgcm] -di --unsafe"
    echo -e "\nPOSITIONAL ARGUMENTS:"
    echo -e "$name -h | --help\t\t\t\tPrint this help message."
    echo -e "$name -r | --resolution <XxY>\t\tSet the resolution of the awesome window in Xaxis x Yaxis eg 1920x1080 (default 800x600"
    echo -e "$name -d | --display <number>\t\tSet the display on which to show the window (by default :1)"
    echo -e "$name -e | --exec command\t\t\tCommand to execute in the environment eg awesome"
    echo -e "$name -s | --stop \t\t\t\tStop all instances"
    echo -e "$name -m | --monitor \t\t\tStart running multiple monitors"
    echo -e "$name --unsafe \t\t\t\tAllow running this utility as root"
    echo -e "\nPROFILING COMMANDS:"
    echo -e "$name -S | --sample \t\t\tSample the process using Oprofile"
    echo -e "$name -R | --report \t\t\tGet the report of the Oprofile tool"
    echo -e "$name -c | --cleanup \t\t\tRemove the generated files and directories"
    echo -e "\nDEBUGGING COMMANDS:"
    echo -e "$name -g | --gdb \t\t\t\tOpen your tool in gdb"
    echo -e "\nSETUP COMMANDS:"
    echo -e "$name -i | --init \t\t\t\tMake a symbolic like to your PATH. Making this script accessible from everywhere"
    echo -e "$name -di | --deinit \t\t\tRemove the symbolic link that has been created"
}

function abort {
        killall Xephyr
}

function set-variables {
    while [ "$1" != "" ]; do
        if [[ "$1" == "-r" || "$1" == "--resolution" ]]; then
            RESOLUTION="$2"
            shift
        fi
        if [[ "$1" == "-d" || "$1" == "--display" ]]; then
            AWESOME_DISPLAY="$2"
            shift
        fi
        if [[ "$1" == "-e" || "$1" == "--exec" ]]; then
            EXEC="$2"
            shift
        fi
        if [[ "$1" == "-S" || "$1" == "--sample" ]]; then
                PARENT_COMMAND="operf"
        fi
        if [[ "$1" == "-g" || "$1" == "--gdb" ]]; then
                PARENT_COMMAND="gdb"
        fi
        if [[ "$1" == "-R" || "$1" == "--report" ]]; then
                COMMAND="$(echo "$EXEC" | cut -d" " -f1 )"
                opreport -cl --demangle=smart `which $COMMAND`
                exit 0
        fi
        if [[ "$1" == "-i" || "$1" == "--init" ]]; then
                log "$LOG_WARN" "Generating a symbolic link to the system path. Don't move this script otherwise you need to call $0 -di"
                if [[ "$0" == "$ROOT_PATH/wm-launch" ]]; then
                    log "$LOG_ERROR" "Cannot make a symbolic link to itself"
                    exit 1
                fi
                sudo ln -s "$(realpath $0)" "$ROOT_PATH/wm-launch"
                exit 0
        fi
        if [[ "$1" == "-di" || "$1" == "--deinit" ]]; then
                log "$LOG_WARN" "Removing the symbolic link to the executable"
                if [[ -f "$ROOT_PATH/wm-launch" ]]; then
                    sudo rm "$ROOT_PATH/wm-launch"
                    exit 0
                else
                    log "$LOG_ERROR" "Cannot find the symbolic link. Are you sure you have made one?" 
                    exit 1
                fi
        fi
        if [[ "$1" == "-c" || "$1" == "--cleanup" ]]; then
                if [[ -d "oprofile_data" ]]; then
                        rm -rf oprofile_data
                fi
                if [[ -d "$HOME/oprofile_data" ]]; then
                    rm -rf "$HOME/oprofile_data"
                fi
                exit 0
        fi
        if [[ "$1" == "-s" || "$1" == "--stop" ]]; then
            abort
            exit 0
        fi
        if [[ "$1" == "-m" || "$1" == "--monitor" ]]; then
            MULTIPLE_MONITORS="true"
        fi
        if [[ "$1" == "-h" || "$1" == "--help" ]]; then
                help
                exit 0
        fi
        if [[ "$1" == "--unsafe" ]]; then
            UNSAFE="1"
        fi
        shift
    done
}

function checkOperf {
    if [[ ! "$(command -v operf)" ]]; then
        log "$LOG_ERROR" "operf is required to profile the window manager, operf is part of OProfile"
        exit 1
    fi
}

function checkGDB {
    if [[ ! "$(command -v gdb)" ]]; then
        log "$LOG_ERROR" "gdb is required to debug the window manager, Install gdb for this to work"
        exit 1
    fi
}

function launch {
    if [[ "$PARENT_COMMAND" == "operf" ]]; then
        checkOperf
        log "$LOG_WARN" "Notifying kernel of profile sampling mode (requires elevated privileges)" 
        log "$LOG_WARN" "Executing $EXEC with $PARENT_COMMAND"
        sudo sysctl kernel.perf_event_paranoid=1
    elif [[ "$PARENT_COMMAND" == "gdb" ]]; then
        checkGDB
        log "$LOG_WARN" "Executing $EXEC under gdb"
    else
        log "$LOG_WARN" "Executing $EXEC"
    fi
    if [[ "$MULTIPLE_MONITORS" == "" ]]; then
        Xephyr -br -ac -noreset -screen "$RESOLUTION" "$AWESOME_DISPLAY"  &
    else
        Xephyr -screen "$RESOLUTION" -screen "$RESOLUTION" +xinerama "$AWESOME_DISPLAY"  &
    fi
    sleep 1
    
    # Not quoted because the variable can hold the options as well
    DISPLAY="$AWESOME_DISPLAY" $PARENT_COMMAND $EXEC

}


is-installed
set-variables "$@"
check-non-root

launch
